// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// People
model Library {
  slug             String             @id
  name             String             @unique
  address          String
  administrator_id Int
  administrator    User               @relation(fields: [administrator_id], references: [id])
  subscribed       UserSubscription[]
  items            Item[]
}

model UserSubscription {
  id                Int           @id @default(autoincrement())
  library           Library       @relation(fields: [library_slug], references: [slug])
  name              String        @unique
  no_of_days        Int
  no_of_books       Int
  deposit           Int?
  annual_price      Int?
  half_yearly_price Int?
  users             User[]
  library_slug      String
  Transaction       Transaction[]
}

model Gender {
  code  String @id
  name  String @unique
  users User[]
}

model User {
  id            Int                @id
  name          String
  email_address String             @unique
  gender_code   String
  gender        Gender             @relation(fields: [gender_code], references: [code])
  details       String?
  transactions  Transaction[]
  marks         Mark[]
  libraries     Library[]
  subscriptions UserSubscription[]
}

// Book records
model Author {
  id    Int    @id @default(autoincrement())
  name  String @unique
  books Book[]
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  items Item[]
}

model Publisher {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  address String?
  items   Item[]
}

model Language {
  id    Int    @id @default(autoincrement())
  name  String @unique
  items Item[]
}

model Periodical {
  id   Int      @id @default(autoincrement())
  name String
  date DateTime
}

model Book {
  id               Int      @id
  subtitle         String?
  authors          Author[]
  publication_year Int?
  edition          String?
  isbn             String
  item             Item     @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Magazine {
  id     Int      @id
  sc_no  Int
  issn   String?
  volume String
  issue  String
  from   DateTime
  to     DateTime
  item   Item     @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Item {
  id               Int           @id @default(autoincrement())
  acc_no           Int
  title            String
  status           String
  publisher_id     Int
  publisher        Publisher     @relation(fields: [publisher_id], references: [id])
  languages        Language[]
  categories       Category[]
  reference        Boolean
  call_no          Float         @db.DoublePrecision
  no_of_pages      Int
  purchase_price   Int
  purchase_details String?
  library_slug     String
  library          Library       @relation(fields: [library_slug], references: [slug])
  level            String?
  image_url        String?
  remarks          String?
  book             Book?
  magazine         Magazine?
  transactions     Transaction[]
  mark             Mark?
}

// Transactions
model Transaction {
  id              Int               @id @default(autoincrement())
  user_id         Int
  item_id         Int
  user            User              @relation(fields: [user_id], references: [id])
  item            Item              @relation(fields: [item_id], references: [id])
  issued_at       DateTime
  due_at          DateTime
  returned_at     DateTime?
  deleted         Boolean           @default(false)
  subscription_id Int?
  subscription    UserSubscription? @relation(fields: [subscription_id], references: [id])
  price           Int?
  fine            Int?
  comments        String?
}

model Mark {
  id          Int      @id @default(autoincrement())
  item_id     Int      @unique
  user_id     Int
  user        User     @relation(fields: [user_id], references: [id])
  item        Item     @relation(fields: [item_id], references: [id])
  comments    String?
  borrow_time DateTime
}
